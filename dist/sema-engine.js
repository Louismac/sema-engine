!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["sema-engine"]={})}(this,(function(e){"use strict";class t{static getStorageForCapacity(e,t){if(!t.BYTES_PER_ELEMENT)throw"Pass in a ArrayBuffer subclass";var o=8+(e+1)*t.BYTES_PER_ELEMENT;return new SharedArrayBuffer(o)}constructor(e,t){if(!ArrayBuffer.__proto__.isPrototypeOf(t)&&void 0!==t.BYTES_PER_ELEMENT)throw"Pass a concrete typed array class as second argument";this._type=t,this.capacity=(e.byteLength-8)/t.BYTES_PER_ELEMENT,this.buf=e,this.write_ptr=new Uint32Array(this.buf,0,1),this.read_ptr=new Uint32Array(this.buf,4,1),this.storage=new t(this.buf,8,this.capacity)}type(){return this._type.name}push(e){var t=Atomics.load(this.read_ptr,0),o=Atomics.load(this.write_ptr,0);if((o+1)%this._storage_capacity()==t)return 0;let a=Math.min(this._available_write(t,o),e.length),i=Math.min(this._storage_capacity()-o,a),s=a-i;return this._copy(e,0,this.storage,o,i),this._copy(e,i,this.storage,0,s),Atomics.store(this.write_ptr,0,(o+a)%this._storage_capacity()),a}pop(e){var t=Atomics.load(this.read_ptr,0),o=Atomics.load(this.write_ptr,0);if(o==t)return 0;let a=Math.min(this._available_read(t,o),e.length),i=Math.min(this._storage_capacity()-t,e.length),s=a-i;return this._copy(this.storage,t,e,0,i),this._copy(this.storage,0,e,i,s),Atomics.store(this.read_ptr,0,(t+a)%this._storage_capacity()),a}empty(){var e=Atomics.load(this.read_ptr,0);return Atomics.load(this.write_ptr,0)==e}full(){var e=Atomics.load(this.read_ptr,0);return(Atomics.load(this.write_ptr,0)+1)%this.capacity!=e}capacity(){return this.capacity-1}available_read(){var e=Atomics.load(this.read_ptr,0),t=Atomics.load(this.write_ptr,0);return this._available_read(e,t)}available_write(){var e=Atomics.load(this.read_ptr,0),t=Atomics.load(this.write_ptr,0);return this._available_write(e,t)}_available_read(e,t){return t>e?t-e:t+this._storage_capacity()-e}_available_write(e,t){let o=e-t-1;return t>=e&&(o+=this._storage_capacity()),o}_storage_capacity(){return this.capacity}_copy(e,t,o,a,i){for(var s=0;s<i;s++)o[a+s]=e[t+s]}}const o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",a=e=>64===Module.maxiTools._keyStr.indexOf(e.charAt(e.length-1))?e.substring(0,e.length-1):e;class i extends AudioWorkletNode{constructor(e,t){console.log(),super(e,t,{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[e.destination.maxChannelCount]})}}class s{constructor(){if(s.instance)return s.instance;s.instance=this,this.analysers={},this.sharedArrayBuffers={}}onProcessorMessageEventHandler(e){if(null!=e&&null!=e.data)if(null!=e.data.rq&&"send"===e.data.rq)switch(e.data.ttype){case"ML":this.messaging.publish("model-input-data",{type:"model-input-data",value:e.data.value,ch:e.data.ch});break;case"NET":this.peerNet.send(e.data.ch[0],e.data.value,e.data.ch[1])}else if(e.data.rq&&"buf"===e.data.rq)switch(console.log("buf",e.data),e.data.ttype){case"ML":this.messaging.publish("model-input-buffer",{type:"model-input-buffer",value:e.data.value,channelID:e.data.channelID,blocksize:e.data.blocksize})}else"giveMeSomeSamples"===e.data||e.data.phase}postAsyncMessageToProcessor(e){void 0!==e&&(console.log("DEBUG:AudioEngine:onMessagingEventHandler:"),console.log(e),this.audioWorkletNode.port.postMessage(e))}pollAnalyserData(e){if(void 0!==e){const t=new Uint8Array(e.fftSize),o=new Uint8Array(e.fftSize);return e.getByteTimeDomainData(t),e.getByteFrequencyData(o),{smoothingTimeConstant:e.smoothingTimeConstant,fftSize:e.fftSize,frequencyDataArray:o,timeDataArray:t}}}createAnalyser(e,t){if(void 0!==this.audioContext&&void 0!==event){let o=this.audioContext.createAnalyser();o.smoothingTimeConstant=.25,o.fftSize=256,o.minDecibels=-90,o.maxDecibels=-0,this.audioWorkletNode.connect(o);let a=-1,i={};this.analysers[e]={analyser:o,analyserFrameId:a,callback:t};const s=()=>(i=this.pollAnalyserData(this.analysers[e].analyser),this.analysers[e].callback(i),this.analysers[e].analyserFrameId=requestAnimationFrame(s),a);s()}else void 0===this.audioContext&&(this.analysers[analyser]={})}connectAnalysers(){Object.keys(this.analysers).map((e=>this.createAnalyser({id:e})))}removeAnalyser(e){if(void 0!==this.audioContext&&void 0!==this.audioWorkletNode){void 0!==this.analysers[e.id]&&(cancelAnimationFrame(this.analysers[e.id].analyserFrameId),delete this.analysers[e.id])}}createSharedArrayBuffer(e,o,a){let i=t.getStorageForCapacity(32*a,Float64Array),s=new t(i,Float64Array);this.audioWorkletNode.port.postMessage({func:"sab",value:i,ttype:o,channelID:e,blocksize:a}),this.sharedArrayBuffers[e]={sab:i,rb:s},console.log(this.sharedArrayBuffers)}async init(e){this.audioContext,this.audioWorkletProcessorName="maxi-processor",this.audioWorkletUrl=e,this.samplesLoaded=!1,void 0===this.audioContext&&(this.audioContext=new AudioContext({latencyHint:"playback"}),this.audioContext.destination.channelInterpretation="discrete",this.audioContext.destination.channelCountMode="explicit",this.audioContext.destination.channelCount=this.audioContext.destination.maxChannelCount,await this.loadWorkletProcessorCode(),this.audioWorkletNode.connect(this.audioContext.destination),this.createSharedArrayBuffer("mxy","mouseXY",2))}play(){if(void 0!==this.audioContext)return"suspended"!==this.audioContext.state?(this.stop(),!1):(this.audioContext.resume(),!0)}stop(){void 0!==this.audioWorkletNode&&this.audioContext.suspend()}stopAndRelease(){void 0!==this.audioWorkletNode&&(this.audioWorkletNode.disconnect(this.audioContext.destination),this.audioWorkletNode=void 0)}more(e){if(void 0!==this.audioWorkletNode){const t=this.audioWorkletNode.parameters.get(e);return t.value+=.5,console.log(e+": "+t.value),!0}return!1}less(e){if(void 0!==this.audioWorkletNode){const t=this.audioWorkletNode.parameters.get(e);return t.value-=.5,console.log(e+": "+t.value),!0}return!1}eval(e){return void 0!==this.audioWorkletNode&&("suspended"===this.audioContext.state&&this.audioContext.resume(),this.audioWorkletNode.port.postMessage({eval:1,setup:e.setup,loop:e.loop}),!0)}sendClockPhase(e,t){void 0!==this.audioWorkletNode&&this.audioWorkletNode.port.postMessage({phase:e,i:t})}onAudioInputInit(e){this.audioContext.createMediaStreamSource(e).connect(this.audioWorkletNode)}onAudioInputFail(e){console.log(`DEBUG:AudioEngine:AudioInputFail: ${e.message} ${e.name}`)}async connectMediaStream(){const e=window.constraints={audio:!0,video:!1};navigator.mediaDevices.getUserMedia(e).then((e=>this.onAudioInputInit(e))).catch(this.onAudioInputFail)}async loadWorkletProcessorCode(){if(void 0===this.audioContext)return!1;try{await this.audioContext.audioWorklet.addModule(this.audioWorkletUrl)}catch(e){return console.error("ERROR: AudioEngine:loadWorkletProcessorCode: AudioWorklet not supported in this browser: ",e.message),!1}try{return this.audioWorkletNode=new i(this.audioContext,this.audioWorkletProcessorName),this.audioWorkletNode.onprocessorerror=e=>{console.log("DEBUG:AudioEngine:loadWorkletProcessorCode: MaxiProcessor Error detected")},this.audioWorkletNode.port.onmessageerror=e=>{console.log("DEBUG:AudioEngine:loadWorkletProcessorCode: Error message from port: "+e.data)},this.audioWorkletNode.onprocessorstatechange=e=>{console.log("DEBUG:AudioEngine:loadWorkletProcessorCode: MaxiProcessor state change detected: "+audioWorkletNode.processorState)},this.audioWorkletNode.port.onmessage=e=>{this.onProcessorMessageEventHandler(e)},!0}catch(e){return console.error("ERROR: AudioEngine:loadWorkletProcessorCode: Custom AudioWorklet node creation: ",e.message),!1}}loadSample(e,t){if(void 0===this.audioContext)throw"Audio Context is not initialised!";((e,t,i,s)=>{var r=[],n=(e=>{if(-1!==e.indexOf(";base64,")){var t=e.indexOf(";base64,")+8;return!!e.slice(t).match(/^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/)&&e.slice(t)}return!1})(i);if(n){var d=n.length/4*3,l=new ArrayBuffer(d);n=a(a(n));var c,u,h,p,f,y,g,m=parseInt(n.length/4*3,10),A=0,v=0;for(c=new Uint8Array(l),n=n.replace(/[^A-Za-z0-9\+\/\=]/g,""),A=0;A<m;A+=3)u=o.indexOf(n.charAt(v++))<<2|(f=o.indexOf(n.charAt(v++)))>>4,h=(15&f)<<4|(y=o.indexOf(n.charAt(v++)))>>2,p=(3&y)<<6|(g=o.indexOf(n.charAt(v++))),c[A]=u,64!==y&&(c[A+1]=h),64!==g&&(c[A+2]=p);e.decodeAudioData(l,(function(e){let o=e.getChannelData(0);void 0!==r&&void 0!==s&&s.port.postMessage({sample:t,buffer:o})}),(function(e){console.log("Error decoding source!")}))}else{var _=new XMLHttpRequest;_.addEventListener("load",(()=>console.log("The transfer is complete."))),_.open("GET",i,!0),_.responseType="arraybuffer",_.onload=function(){e.decodeAudioData(_.response,(function(e){let o=e.getChannelData(0);void 0!==r&&void 0!==s&&s.port.postMessage({sample:t,buffer:o})}),(function(e){console.log("Error decoding source!")}))},_.send()}})(this.audioContext,e,t,this.audioWorkletNode)}}e.Engine=s,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
