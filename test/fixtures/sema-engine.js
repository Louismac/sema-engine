!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self)["sema-engine"]={})}(this,(function(exports){"use strict";class RingBuffer{static getStorageForCapacity(e,t){if(!t.BYTES_PER_ELEMENT)throw"Pass in a ArrayBuffer subclass";var o=8+(e+1)*t.BYTES_PER_ELEMENT;return new SharedArrayBuffer(o)}constructor(e,t){if(!ArrayBuffer.__proto__.isPrototypeOf(t)&&void 0!==t.BYTES_PER_ELEMENT)throw"Pass a concrete typed array class as second argument";this._type=t,this.capacity=(e.byteLength-8)/t.BYTES_PER_ELEMENT,this.buf=e,this.write_ptr=new Uint32Array(this.buf,0,1),this.read_ptr=new Uint32Array(this.buf,4,1),this.storage=new t(this.buf,8,this.capacity)}type(){return this._type.name}push(e){var t=Atomics.load(this.read_ptr,0),o=Atomics.load(this.write_ptr,0);if((o+1)%this._storage_capacity()==t)return 0;let r=Math.min(this._available_write(t,o),e.length),n=Math.min(this._storage_capacity()-o,r),i=r-n;return this._copy(e,0,this.storage,o,n),this._copy(e,n,this.storage,0,i),Atomics.store(this.write_ptr,0,(o+r)%this._storage_capacity()),r}pop(e){var t=Atomics.load(this.read_ptr,0),o=Atomics.load(this.write_ptr,0);if(o==t)return 0;let r=Math.min(this._available_read(t,o),e.length),n=Math.min(this._storage_capacity()-t,e.length),i=r-n;return this._copy(this.storage,t,e,0,n),this._copy(this.storage,0,e,n,i),Atomics.store(this.read_ptr,0,(t+r)%this._storage_capacity()),r}empty(){var e=Atomics.load(this.read_ptr,0);return Atomics.load(this.write_ptr,0)==e}full(){var e=Atomics.load(this.read_ptr,0);return(Atomics.load(this.write_ptr,0)+1)%this.capacity!=e}capacity(){return this.capacity-1}available_read(){var e=Atomics.load(this.read_ptr,0),t=Atomics.load(this.write_ptr,0);return this._available_read(e,t)}available_write(){var e=Atomics.load(this.read_ptr,0),t=Atomics.load(this.write_ptr,0);return this._available_write(e,t)}_available_read(e,t){return t>e?t-e:t+this._storage_capacity()-e}_available_write(e,t){let o=e-t-1;return t>=e&&(o+=this._storage_capacity()),o}_storage_capacity(){return this.capacity}_copy(e,t,o,r,n){for(var i=0;i<n;i++)o[r+i]=e[t+i]}}const getBase64=e=>{if(-1!==e.indexOf(";base64,")){var t=e.indexOf(";base64,")+8;return!!e.slice(t).match(/^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/)&&e.slice(t)}return!1},_keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",removePaddingFromBase64=e=>64===Module.maxiTools._keyStr.indexOf(e.charAt(e.length-1))?e.substring(0,e.length-1):e,loadSampleToArray=(e,t,o,r)=>{var n=[],i=getBase64(o);if(i){var s=i.length/4*3,a=new ArrayBuffer(s);i=removePaddingFromBase64(removePaddingFromBase64(i));var l,p,u,c,h,f,m,d=parseInt(i.length/4*3,10),g=0,y=0;for(l=new Uint8Array(a),i=i.replace(/[^A-Za-z0-9\+\/\=]/g,""),g=0;g<d;g+=3)p=_keyStr.indexOf(i.charAt(y++))<<2|(h=_keyStr.indexOf(i.charAt(y++)))>>4,u=(15&h)<<4|(f=_keyStr.indexOf(i.charAt(y++)))>>2,c=(3&f)<<6|(m=_keyStr.indexOf(i.charAt(y++))),l[g]=p,64!==f&&(l[g+1]=u),64!==m&&(l[g+2]=c);e.decodeAudioData(a,(function(e){let o=e.getChannelData(0);void 0!==n&&void 0!==r&&r.port.postMessage({sample:t,buffer:o})}),(function(e){console.log("Error decoding source!")}))}else{var $=new XMLHttpRequest;$.addEventListener("load",(()=>console.log("The transfer is complete."))),$.open("GET",o,!0),$.responseType="arraybuffer",$.onload=function(){e.decodeAudioData($.response,(function(e){let o=e.getChannelData(0);void 0!==n&&void 0!==r&&r.port.postMessage({sample:t,buffer:o})}),(function(e){console.log("Error decoding source!")}))},$.send()}return"Loading module"};class CustomMaxiNode extends AudioWorkletNode{constructor(e,t){console.log(),super(e,t,{numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[e.destination.maxChannelCount]})}}class Engine{constructor(){if(Engine.instance)return Engine.instance;Engine.instance=this,this.analysers={},this.sharedArrayBuffers={}}postAsyncMessageToProcessor(e){void 0!==e&&(console.log("DEBUG:AudioEngine:onMessagingEventHandler:"),console.log(e),this.audioWorkletNode.port.postMessage(e))}pushToSharedArrayBuffer(e,t){this.sharedArrayBuffers[e]&&this.sharedArrayBuffers[e].rb.push(t)}createSharedArrayBuffer(e,t,o){let r=RingBuffer.getStorageForCapacity(32*o,Float64Array),n=new RingBuffer(r,Float64Array);this.audioWorkletNode.port.postMessage({func:"sab",value:r,ttype:t,channelID:e,blocksize:o}),this.sharedArrayBuffers[e]={sab:r,rb:n}}pollAnalyserData(e){if(void 0!==e){const t=new Uint8Array(e.fftSize),o=new Uint8Array(e.fftSize);return e.getByteTimeDomainData(t),e.getByteFrequencyData(o),{smoothingTimeConstant:e.smoothingTimeConstant,fftSize:e.fftSize,frequencyDataArray:o,timeDataArray:t}}}createAnalyser(e,t){if(void 0!==this.audioContext&&void 0!==e&&void 0!==t){let o=this.audioContext.createAnalyser();o.smoothingTimeConstant=.25,o.fftSize=256,o.minDecibels=-90,o.maxDecibels=-0,this.audioWorkletNode.connect(o);let r=-1,n={};this.analysers[e]={analyser:o,analyserFrameId:r,callback:t};const i=()=>(n=this.pollAnalyserData(this.analysers[e].analyser),this.analysers[e].callback(n),this.analysers[e].analyserFrameId=requestAnimationFrame(i),r);i()}else void 0===this.audioContext&&(this.analysers[e]={callback:t})}connectAnalysers(){Object.keys(this.analysers).map((e=>this.createAnalyser(e,this.analysers[e].callback)))}removeAnalyser(e){if(void 0!==this.audioContext&&void 0!==this.audioWorkletNode){void 0!==this.analysers[e.id]&&(cancelAnimationFrame(this.analysers[e.id].analyserFrameId),delete this.analysers[e.id])}}async init(e){this.audioContext,this.audioWorkletProcessorName="maxi-processor",this.audioWorkletUrl=e,this.samplesLoaded=!1,void 0===this.audioContext&&(this.audioContext=new AudioContext({latencyHint:"playback"}),await this.loadWorkletProcessorCode(),this.connectWorkletNode())}play(){if(void 0!==this.audioContext)return"suspended"!==this.audioContext.state?(this.stop(),!1):(this.audioContext.resume(),!0)}stop(){void 0!==this.audioWorkletNode&&this.audioContext.suspend()}stopAndRelease(){void 0!==this.audioWorkletNode&&(this.audioWorkletNode.disconnect(this.audioContext.destination),this.audioWorkletNode=void 0)}more(e){if(void 0!==this.audioWorkletNode){const t=this.audioWorkletNode.parameters.get(e);return t.value+=.5,console.log(e+": "+t.value),!0}return!1}less(e){if(void 0!==this.audioWorkletNode){const t=this.audioWorkletNode.parameters.get(e);return t.value-=.5,console.log(e+": "+t.value),!0}return!1}eval(e){return void 0!==this.audioWorkletNode&&("suspended"===this.audioContext.state&&this.audioContext.resume(),this.audioWorkletNode.port.postMessage({eval:1,setup:e.setup,loop:e.loop}),!0)}sendClockPhase(e,t){void 0!==this.audioWorkletNode&&this.audioWorkletNode.port.postMessage({phase:e,i:t})}onAudioInputInit(e){this.audioContext.createMediaStreamSource(e).connect(this.audioWorkletNode)}onAudioInputFail(e){console.log(`DEBUG:AudioEngine:AudioInputFail: ${e.message} ${e.name}`)}async connectMediaStream(){const e=window.constraints={audio:!0,video:!1};navigator.mediaDevices.getUserMedia(e).then((e=>this.onAudioInputInit(e))).catch(this.onAudioInputFail)}async loadWorkletProcessorCode(){if(void 0===this.audioContext)return!1;try{await this.audioContext.audioWorklet.addModule(this.audioWorkletUrl)}catch(e){return console.error("ERROR: AudioEngine:loadWorkletProcessorCode: AudioWorklet not supported in this browser: ",e.message),!1}try{return this.audioWorkletNode=new CustomMaxiNode(this.audioContext,this.audioWorkletProcessorName),!0}catch(e){return console.error("ERROR: AudioEngine:loadWorkletProcessorCode: Custom AudioWorklet node creation: ",e.message),!1}}connectWorkletNode(){if(void 0!==this.audioWorkletNode)try{this.audioContext.destination.channelInterpretation="discrete",this.audioContext.destination.channelCountMode="explicit",this.audioContext.destination.channelCount=this.audioContext.destination.maxChannelCount,this.audioWorkletNode.connect(this.audioContext.destination),this.audioWorkletNode.onprocessorerror=e=>{console.error("Engine: maxi-processor ERROR detected")},this.audioWorkletNode.port.onmessageerror=e=>{console.error("Engine: ERROR message from port: "+e.data)},this.audioWorkletNode.onprocessorstatechange=e=>{console.log("maxi-processor state change detected: "+audioWorkletNode.processorState)}}catch(e){console.error("Engine: ERROR connecting WorkletNode: ",e.message)}}subscribeAsyncMessage(e){void 0!==e&&void 0!==this.audioWorkletNode&&(this.audioWorkletNode.port.onmessage=e)}loadSample(e,t){if(void 0===this.audioContext)throw"Audio Context is not initialised!";loadSampleToArray(this.audioContext,e,t,this.audioWorkletNode)}}var commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function createCommonjsModule(e){var t={exports:{}};return e(t,t.exports),t.exports}var nearley=createCommonjsModule((function(e){var t,o;t=commonjsGlobal,o=function(){function e(t,o,r){return this.id=++e.highestId,this.name=t,this.symbols=o,this.postprocess=r,this}function t(e,t,o,r){this.rule=e,this.dot=t,this.reference=o,this.data=[],this.wantedBy=r,this.isComplete=this.dot===e.symbols.length}function o(e,t){this.grammar=e,this.index=t,this.states=[],this.wants={},this.scannable=[],this.completed={}}function r(e,t){this.rules=e,this.start=t||this.rules[0].name;var o=this.byName={};this.rules.forEach((function(e){o.hasOwnProperty(e.name)||(o[e.name]=[]),o[e.name].push(e)}))}function n(){this.reset("")}function i(e,t,i){if(e instanceof r){var s=e;i=t}else s=r.fromCompiled(e,t);for(var a in this.grammar=s,this.options={keepHistory:!1,lexer:s.lexer||new n},i||{})this.options[a]=i[a];this.lexer=this.options.lexer,this.lexerState=void 0;var l=new o(s,0);this.table=[l],l.wants[s.start]=[],l.predict(s.start),l.process(),this.current=0}function s(e){var t=typeof e;if("string"===t)return e;if("object"===t){if(e.literal)return JSON.stringify(e.literal);if(e instanceof RegExp)return e.toString();if(e.type)return"%"+e.type;if(e.test)return"<"+String(e.test)+">";throw new Error("Unknown symbol type: "+e)}}return e.highestId=0,e.prototype.toString=function(e){var t=void 0===e?this.symbols.map(s).join(" "):this.symbols.slice(0,e).map(s).join(" ")+" ● "+this.symbols.slice(e).map(s).join(" ");return this.name+" → "+t},t.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},t.prototype.nextState=function(e){var o=new t(this.rule,this.dot+1,this.reference,this.wantedBy);return o.left=this,o.right=e,o.isComplete&&(o.data=o.build(),o.right=void 0),o},t.prototype.build=function(){var e=[],t=this;do{e.push(t.right.data),t=t.left}while(t.left);return e.reverse(),e},t.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,i.fail))},o.prototype.process=function(e){for(var t=this.states,o=this.wants,r=this.completed,n=0;n<t.length;n++){var s=t[n];if(s.isComplete){if(s.finish(),s.data!==i.fail){for(var a=s.wantedBy,l=a.length;l--;){var p=a[l];this.complete(p,s)}if(s.reference===this.index){var u=s.rule.name;(this.completed[u]=this.completed[u]||[]).push(s)}}}else{if("string"!=typeof(u=s.rule.symbols[s.dot])){this.scannable.push(s);continue}if(o[u]){if(o[u].push(s),r.hasOwnProperty(u)){var c=r[u];for(l=0;l<c.length;l++){var h=c[l];this.complete(s,h)}}}else o[u]=[s],this.predict(u)}}},o.prototype.predict=function(e){for(var o=this.grammar.byName[e]||[],r=0;r<o.length;r++){var n=o[r],i=this.wants[e],s=new t(n,0,this.index,i);this.states.push(s)}},o.prototype.complete=function(e,t){var o=e.nextState(t);this.states.push(o)},r.fromCompiled=function(t,o){var n=t.Lexer;t.ParserStart&&(o=t.ParserStart,t=t.ParserRules);var i=new r(t=t.map((function(t){return new e(t.name,t.symbols,t.postprocess)})),o);return i.lexer=n,i},n.prototype.reset=function(e,t){this.buffer=e,this.index=0,this.line=t?t.line:1,this.lastLineBreak=t?-t.col:0},n.prototype.next=function(){if(this.index<this.buffer.length){var e=this.buffer[this.index++];return"\n"===e&&(this.line+=1,this.lastLineBreak=this.index),{value:e}}},n.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},n.prototype.formatError=function(e,t){var o=this.buffer;if("string"==typeof o){var r=o.split("\n").slice(Math.max(0,this.line-5),this.line),n=o.indexOf("\n",this.index);-1===n&&(n=o.length);var i=this.index-this.lastLineBreak,s=String(this.line).length;return t+=" at line "+this.line+" col "+i+":\n\n",t+=r.map((function(e,t){return a(this.line-r.length+t+1,s)+" "+e}),this).join("\n"),t+="\n"+a("",s+i)+"^\n"}return t+" at index "+(this.index-1);function a(e,t){var o=String(e);return Array(t-o.length+1).join(" ")+o}},i.fail={},i.prototype.feed=function(e){var t,r=this.lexer;for(r.reset(e,this.lexerState);;){try{if(!(t=r.next()))break}catch(e){var i=new o(this.grammar,this.current+1);throw this.table.push(i),(l=new Error(this.reportLexerError(e))).offset=this.current,l.token=e.token,l}var s=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var a=this.current+1;i=new o(this.grammar,a),this.table.push(i);for(var l,p=void 0!==t.text?t.text:t.value,u=r.constructor===n?t.value:t,c=s.scannable,h=c.length;h--;){var f=c[h],m=f.rule.symbols[f.dot];if(m.test?m.test(u):m.type?m.type===t.type:m.literal===p){var d=f.nextState({data:u,token:t,isToken:!0,reference:a-1});i.states.push(d)}}if(i.process(),0===i.states.length)throw(l=new Error(this.reportError(t))).offset=this.current,l.token=t,l;this.options.keepHistory&&(s.lexerState=r.save()),this.current++}return s&&(this.lexerState=r.save()),this.results=this.finish(),this},i.prototype.reportLexerError=function(e){var t,o,r=e.token;return r?(t="input "+JSON.stringify(r.text[0])+" (lexer error)",o=this.lexer.formatError(r,"Syntax error")):(t="input (lexer error)",o=e.message),this.reportErrorCommon(o,t)},i.prototype.reportError=function(e){var t=(e.type?e.type+" token: ":"")+JSON.stringify(void 0!==e.value?e.value:e),o=this.lexer.formatError(e,"Syntax error");return this.reportErrorCommon(o,t)},i.prototype.reportErrorCommon=function(e,t){var o=[];o.push(e);var r=this.table.length-2,n=this.table[r],i=n.states.filter((function(e){var t=e.rule.symbols[e.dot];return t&&"string"!=typeof t}));return 0===i.length?(o.push("Unexpected "+t+". I did not expect any more input. Here is the state of my parse table:\n"),this.displayStateStack(n.states,o)):(o.push("Unexpected "+t+". Instead, I was expecting to see one of the following:\n"),i.map((function(e){return this.buildFirstStateStack(e,[])||[e]}),this).forEach((function(e){var t=e[0],r=t.rule.symbols[t.dot],n=this.getSymbolDisplay(r);o.push("A "+n+" based on:"),this.displayStateStack(e,o)}),this)),o.push(""),o.join("\n")},i.prototype.displayStateStack=function(e,t){for(var o,r=0,n=0;n<e.length;n++){var i=e[n],s=i.rule.toString(i.dot);s===o?r++:(r>0&&t.push("    ^ "+r+" more lines identical to this"),r=0,t.push("    "+s)),o=s}},i.prototype.getSymbolDisplay=function(e){return function(e){var t=typeof e;if("string"===t)return e;if("object"===t){if(e.literal)return JSON.stringify(e.literal);if(e instanceof RegExp)return"character matching "+e;if(e.type)return e.type+" token";if(e.test)return"token matching "+String(e.test);throw new Error("Unknown symbol type: "+e)}}(e)},i.prototype.buildFirstStateStack=function(e,t){if(-1!==t.indexOf(e))return null;if(0===e.wantedBy.length)return[e];var o=e.wantedBy[0],r=[e].concat(t),n=this.buildFirstStateStack(o,r);return null===n?null:[e].concat(n)},i.prototype.save=function(){var e=this.table[this.current];return e.lexerState=this.lexerState,e},i.prototype.restore=function(e){var t=e.index;this.current=t,this.table[t]=e,this.table.splice(t+1),this.lexerState=e.lexerState,this.results=this.finish()},i.prototype.rewind=function(e){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[e])},i.prototype.finish=function(){var e=[],t=this.grammar.start;return this.table[this.table.length-1].states.forEach((function(o){o.rule.name===t&&o.dot===o.rule.symbols.length&&0===o.reference&&o.data!==i.fail&&e.push(o)})),e.map((function(e){return e.data}))},{Parser:i,Grammar:r,Rule:e}},e.exports?e.exports=o():t.nearley=o()})),moo=createCommonjsModule((function(e){var t,o;t=commonjsGlobal,o=function(){var e=Object.prototype.hasOwnProperty,t=Object.prototype.toString,o="boolean"==typeof(new RegExp).sticky;function r(e){return e&&"[object RegExp]"===t.call(e)}function n(e){return e&&"object"==typeof e&&!r(e)&&!Array.isArray(e)}function i(e){return"("+e+")"}function s(e){return e.length?"(?:"+e.map((function(e){return"(?:"+e+")"})).join("|")+")":"(?!)"}function a(e){if("string"==typeof e)return"(?:"+e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")+")";if(r(e)){if(e.ignoreCase)throw new Error("RegExp /i flag not allowed");if(e.global)throw new Error("RegExp /g flag is implied");if(e.sticky)throw new Error("RegExp /y flag is implied");if(e.multiline)throw new Error("RegExp /m flag is implied");return e.source}throw new Error("Not a pattern: "+e)}function l(t,o){if(n(o)||(o={match:o}),o.include)throw new Error("Matching rules cannot also include states");var i={defaultType:t,lineBreaks:!!o.error||!!o.fallback,pop:!1,next:null,push:null,error:!1,fallback:!1,value:null,type:null,shouldThrow:!1};for(var s in o)e.call(o,s)&&(i[s]=o[s]);if("string"==typeof i.type&&t!==i.type)throw new Error("Type transform cannot be a string (type '"+i.type+"' for token '"+t+"')");var a=i.match;return i.match=Array.isArray(a)?a:a?[a]:[],i.match.sort((function(e,t){return r(e)&&r(t)?0:r(t)?-1:r(e)?1:t.length-e.length})),i}function p(e){return Array.isArray(e)?function(e){for(var t=[],o=0;o<e.length;o++){var r=e[o];if(r.include)for(var n=[].concat(r.include),i=0;i<n.length;i++)t.push({include:n[i]});else{if(!r.type)throw new Error("Rule has no type: "+JSON.stringify(r));t.push(l(r.type,r))}}return t}(e):function(e){for(var t=Object.getOwnPropertyNames(e),o=[],r=0;r<t.length;r++){var i=t[r],s=e[i],a=[].concat(s);if("include"!==i){var p=[];a.forEach((function(e){n(e)?(p.length&&o.push(l(i,p)),o.push(l(i,e)),p=[]):p.push(e)})),p.length&&o.push(l(i,p))}else for(var u=0;u<a.length;u++)o.push({include:a[u]})}return o}(e)}var u=l("error",{lineBreaks:!0,shouldThrow:!0});function c(e,t){for(var n=null,l=Object.create(null),p=!0,c=null,h=[],f=[],m=0;m<e.length;m++)e[m].fallback&&(p=!1);for(m=0;m<e.length;m++){var d=e[m];if(d.include)throw new Error("Inheritance is not allowed in stateless lexers");if(d.error||d.fallback){if(n)throw!d.fallback==!n.fallback?new Error("Multiple "+(d.fallback?"fallback":"error")+" rules not allowed (for token '"+d.defaultType+"')"):new Error("fallback and error are mutually exclusive (for token '"+d.defaultType+"')");n=d}var g=d.match.slice();if(p)for(;g.length&&"string"==typeof g[0]&&1===g[0].length;)l[g.shift().charCodeAt(0)]=d;if(d.pop||d.push||d.next){if(!t)throw new Error("State-switching options are not allowed in stateless lexers (for token '"+d.defaultType+"')");if(d.fallback)throw new Error("State-switching options are not allowed on fallback tokens (for token '"+d.defaultType+"')")}if(0!==g.length){p=!1,h.push(d);for(var y=0;y<g.length;y++){var $=g[y];if(r($))if(null===c)c=$.unicode;else if(c!==$.unicode&&!1===d.fallback)throw new Error("If one rule is /u then all must be")}var x=s(g.map(a)),b=new RegExp(x);if(b.test(""))throw new Error("RegExp matches empty string: "+b);if(new RegExp("|"+x).exec("").length-1>0)throw new Error("RegExp has capture groups: "+b+"\nUse (?: … ) instead");if(!d.lineBreaks&&b.test("\n"))throw new Error("Rule should declare lineBreaks: "+b);f.push(i(x))}}var v=n&&n.fallback,w=o&&!v?"ym":"gm",k=o||v?"":"|";return!0===c&&(w+="u"),{regexp:new RegExp(s(f)+k,w),groups:h,fast:l,error:n||u}}function h(e,t,o){var r=e&&(e.push||e.next);if(r&&!o[r])throw new Error("Missing state '"+r+"' (in token '"+e.defaultType+"' of state '"+t+"')");if(e&&e.pop&&1!=+e.pop)throw new Error("pop must be 1 (in token '"+e.defaultType+"' of state '"+t+"')")}var f=function(e,t){this.startState=t,this.states=e,this.buffer="",this.stack=[],this.reset()};f.prototype.reset=function(e,t){return this.buffer=e||"",this.index=0,this.line=t?t.line:1,this.col=t?t.col:1,this.queuedToken=t?t.queuedToken:null,this.queuedThrow=t?t.queuedThrow:null,this.setState(t?t.state:this.startState),this.stack=t&&t.stack?t.stack.slice():[],this},f.prototype.save=function(){return{line:this.line,col:this.col,state:this.state,stack:this.stack.slice(),queuedToken:this.queuedToken,queuedThrow:this.queuedThrow}},f.prototype.setState=function(e){if(e&&this.state!==e){this.state=e;var t=this.states[e];this.groups=t.groups,this.error=t.error,this.re=t.regexp,this.fast=t.fast}},f.prototype.popState=function(){this.setState(this.stack.pop())},f.prototype.pushState=function(e){this.stack.push(this.state),this.setState(e)};var m=o?function(e,t){return e.exec(t)}:function(e,t){var o=e.exec(t);return 0===o[0].length?null:o};function d(){return this.value}if(f.prototype._getGroup=function(e){for(var t=this.groups.length,o=0;o<t;o++)if(void 0!==e[o+1])return this.groups[o];throw new Error("Cannot find token type for matched text")},f.prototype.next=function(){var e=this.index;if(this.queuedGroup){var t=this._token(this.queuedGroup,this.queuedText,e);return this.queuedGroup=null,this.queuedText="",t}var o=this.buffer;if(e!==o.length){if(s=this.fast[o.charCodeAt(e)])return this._token(s,o.charAt(e),e);var r=this.re;r.lastIndex=e;var n=m(r,o),i=this.error;if(null==n)return this._token(i,o.slice(e,o.length),e);var s=this._getGroup(n),a=n[0];return i.fallback&&n.index!==e?(this.queuedGroup=s,this.queuedText=a,this._token(i,o.slice(e,n.index),e)):this._token(s,a,e)}},f.prototype._token=function(e,t,o){var r=0;if(e.lineBreaks){var n=/\n/g,i=1;if("\n"===t)r=1;else for(;n.exec(t);)r++,i=n.lastIndex}var s={type:"function"==typeof e.type&&e.type(t)||e.defaultType,value:"function"==typeof e.value?e.value(t):t,text:t,toString:d,offset:o,lineBreaks:r,line:this.line,col:this.col},a=t.length;if(this.index+=a,this.line+=r,0!==r?this.col=a-i+1:this.col+=a,e.shouldThrow)throw new Error(this.formatError(s,"invalid syntax"));return e.pop?this.popState():e.push?this.pushState(e.push):e.next&&this.setState(e.next),s},"undefined"!=typeof Symbol&&Symbol.iterator){var g=function(e){this.lexer=e};g.prototype.next=function(){var e=this.lexer.next();return{value:e,done:!e}},g.prototype[Symbol.iterator]=function(){return this},f.prototype[Symbol.iterator]=function(){return new g(this)}}return f.prototype.formatError=function(e,t){if(null==e){var o=this.buffer.slice(this.index);e={text:o,offset:this.index,lineBreaks:-1===o.indexOf("\n")?0:1,line:this.line,col:this.col}}var r=Math.max(0,e.offset-e.col+1),n=e.lineBreaks?e.text.indexOf("\n"):e.text.length,i=this.buffer.substring(r,e.offset+n);return t+=" at line "+e.line+" col "+e.col+":\n\n",t+="  "+i+"\n",t+="  "+Array(e.col).join(" ")+"^"},f.prototype.clone=function(){return new f(this.states,this.state)},f.prototype.has=function(e){return!0},{compile:function(e){var t=c(p(e));return new f({start:t},"start")},states:function(e,t){var o=e.$all?p(e.$all):[];delete e.$all;var r=Object.getOwnPropertyNames(e);t||(t=r[0]);for(var n=Object.create(null),i=0;i<r.length;i++)n[x=r[i]]=p(e[x]).concat(o);for(i=0;i<r.length;i++)for(var s=n[x=r[i]],a=Object.create(null),l=0;l<s.length;l++){var u=s[l];if(u.include){var m=[l,1];if(u.include!==x&&!a[u.include]){a[u.include]=!0;var d=n[u.include];if(!d)throw new Error("Cannot include nonexistent state '"+u.include+"' (in state '"+x+"')");for(var g=0;g<d.length;g++){var y=d[g];-1===s.indexOf(y)&&m.push(y)}}s.splice.apply(s,m),l--}}var $=Object.create(null);for(i=0;i<r.length;i++){var x;$[x=r[i]]=c(n[x],!0)}for(i=0;i<r.length;i++){var b=r[i],v=$[b],w=v.groups;for(l=0;l<w.length;l++)h(w[l],b,$);var k=Object.getOwnPropertyNames(v.fast);for(l=0;l<k.length;l++)h(v.fast[k[l]],b,$)}return new f($,t)},error:Object.freeze({error:!0}),fallback:Object.freeze({fallback:!0}),keywords:function(e){for(var t=Object.create(null),o=Object.create(null),r=Object.getOwnPropertyNames(e),n=0;n<r.length;n++){var i=r[n],s=e[i];(Array.isArray(s)?s:[s]).forEach((function(e){if((o[e.length]=o[e.length]||[]).push(e),"string"!=typeof e)throw new Error("keyword must be string (in keyword '"+i+"')");t[e]=i}))}function a(e){return JSON.stringify(e)}var l="";for(var p in l+="switch (value.length) {\n",o){var u=o[p];l+="case "+p+":\n",l+="switch (value) {\n",u.forEach((function(e){var o=t[e];l+="case "+a(e)+": return "+a(o)+"\n"})),l+="}\n"}return l+="}\n",Function("value",l)}}},e.exports?e.exports=o():t.moo=o()})),nearleyLanguageBootstrapped=createCommonjsModule((function(e){!function(){function t(e){return e[0]}function o(e){return e[0].value}var r=moo,n=Object.assign({ws:{match:/\s+/,lineBreaks:!0,next:"main"},comment:/\#.*/,arrow:{match:/[=-]+\>/,next:"main"},js:{match:/\{\%(?:[^%]|\%[^}])*\%\}/,value:e=>e.slice(2,-2),lineBreaks:!0},word:{match:/[\w\?\+]+/,next:"afterWord"},string:{match:/"(?:[^\\"\n]|\\["\\/bfnrt]|\\u[a-fA-F0-9]{4})*"/,value:e=>JSON.parse(e),next:"main"},btstring:{match:/`[^`]*`/,value:e=>e.slice(1,-1),next:"main",lineBreaks:!0}},function(e){var t={};for(var o of e)t[o]={match:o,next:"main"};return t}([",","|","$","%","(",")",":?",":*",":+","@include","@builtin","@","]"])),i=r.states({main:Object.assign({},n,{charclass:{match:/\.|\[(?:\\.|[^\\\n])+?\]/,value:e=>new RegExp(e)}}),afterWord:Object.assign({},n,{"[":{match:"[",next:"main"}})});var s={Lexer:i,ParserRules:[{name:"final$ebnf$1",symbols:[i.has("ws")?{type:"ws"}:ws],postprocess:t},{name:"final$ebnf$1",symbols:[],postprocess:function(e){return null}},{name:"final",symbols:["_","prog","_","final$ebnf$1"],postprocess:function(e){return e[1]}},{name:"prog",symbols:["prod"],postprocess:function(e){return[e[0]]}},{name:"prog",symbols:["prod","ws","prog"],postprocess:function(e){return[e[0]].concat(e[2])}},{name:"prod",symbols:["word","_",i.has("arrow")?{type:"arrow"}:arrow,"_","expression+"],postprocess:function(e){return{name:e[0],rules:e[4]}}},{name:"prod",symbols:["word",{literal:"["},"_","wordlist","_",{literal:"]"},"_",i.has("arrow")?{type:"arrow"}:arrow,"_","expression+"],postprocess:function(e){return{macro:e[0],args:e[3],exprs:e[9]}}},{name:"prod",symbols:[{literal:"@"},"_","js"],postprocess:function(e){return{body:e[2]}}},{name:"prod",symbols:[{literal:"@"},"word","ws","word"],postprocess:function(e){return{config:e[1],value:e[3]}}},{name:"prod",symbols:[{literal:"@include"},"_","string"],postprocess:function(e){return{include:e[2].literal,builtin:!1}}},{name:"prod",symbols:[{literal:"@builtin"},"_","string"],postprocess:function(e){return{include:e[2].literal,builtin:!0}}},{name:"expression+",symbols:["completeexpression"]},{name:"expression+",symbols:["expression+","_",{literal:"|"},"_","completeexpression"],postprocess:function(e){return e[0].concat([e[4]])}},{name:"expressionlist",symbols:["completeexpression"]},{name:"expressionlist",symbols:["expressionlist","_",{literal:","},"_","completeexpression"],postprocess:function(e){return e[0].concat([e[4]])}},{name:"wordlist",symbols:["word"]},{name:"wordlist",symbols:["wordlist","_",{literal:","},"_","word"],postprocess:function(e){return e[0].concat([e[4]])}},{name:"completeexpression",symbols:["expr"],postprocess:function(e){return{tokens:e[0]}}},{name:"completeexpression",symbols:["expr","_","js"],postprocess:function(e){return{tokens:e[0],postprocess:e[2]}}},{name:"expr_member",symbols:["word"],postprocess:t},{name:"expr_member",symbols:[{literal:"$"},"word"],postprocess:function(e){return{mixin:e[1]}}},{name:"expr_member",symbols:["word",{literal:"["},"_","expressionlist","_",{literal:"]"}],postprocess:function(e){return{macrocall:e[0],args:e[3]}}},{name:"expr_member$ebnf$1",symbols:[{literal:"i"}],postprocess:t},{name:"expr_member$ebnf$1",symbols:[],postprocess:function(e){return null}},{name:"expr_member",symbols:["string","expr_member$ebnf$1"],postprocess:function(e){return e[1]?function(e){for(var t=e.literal,o=[],r=0;r<t.length;r++){var n=t.charAt(r);n.toUpperCase()!==n||n.toLowerCase()!==n?o.push(new RegExp("["+n.toLowerCase()+n.toUpperCase()+"]")):o.push({literal:n})}return{subexpression:[{tokens:o,postprocess:function(e){return e.join("")}}]}}(e[0]):e[0]}},{name:"expr_member",symbols:[{literal:"%"},"word"],postprocess:function(e){return{token:e[1]}}},{name:"expr_member",symbols:["charclass"],postprocess:t},{name:"expr_member",symbols:[{literal:"("},"_","expression+","_",{literal:")"}],postprocess:function(e){return{subexpression:e[2]}}},{name:"expr_member",symbols:["expr_member","_","ebnf_modifier"],postprocess:function(e){return{ebnf:e[0],modifier:e[2]}}},{name:"ebnf_modifier",symbols:[{literal:":+"}],postprocess:o},{name:"ebnf_modifier",symbols:[{literal:":*"}],postprocess:o},{name:"ebnf_modifier",symbols:[{literal:":?"}],postprocess:o},{name:"expr",symbols:["expr_member"]},{name:"expr",symbols:["expr","ws","expr_member"],postprocess:function(e){return e[0].concat([e[2]])}},{name:"word",symbols:[i.has("word")?{type:"word"}:word],postprocess:o},{name:"string",symbols:[i.has("string")?{type:"string"}:string],postprocess:e=>({literal:e[0].value})},{name:"string",symbols:[i.has("btstring")?{type:"btstring"}:btstring],postprocess:e=>({literal:e[0].value})},{name:"charclass",symbols:[i.has("charclass")?{type:"charclass"}:charclass],postprocess:o},{name:"js",symbols:[i.has("js")?{type:"js"}:js],postprocess:o},{name:"_$ebnf$1",symbols:["ws"],postprocess:t},{name:"_$ebnf$1",symbols:[],postprocess:function(e){return null}},{name:"_",symbols:["_$ebnf$1"]},{name:"ws",symbols:[i.has("ws")?{type:"ws"}:ws]},{name:"ws$ebnf$1",symbols:[i.has("ws")?{type:"ws"}:ws],postprocess:t},{name:"ws$ebnf$1",symbols:[],postprocess:function(e){return null}},{name:"ws",symbols:["ws$ebnf$1",i.has("comment")?{type:"comment"}:comment,"_"]}],ParserStart:"final"};e.exports=s}()}));function compileLowLevel(e,t){var o=uniquer();t.alreadycompiled||(t.alreadycompiled=[]);for(var r={rules:[],body:[],config:{},customTokens:[],macros:{},start:""},n=0;n<e.length;n++){var i=e[n];if(c(i.name,i.pos,i.name&&i.name.length),i.body)t.nojs||r.body.push(i.body);else if(i.include){var s;if(s=i.builtin?i.include:require("path").resolve(t.file?require("path").dirname(t.file):process.cwd(),i.include),-1===t.alreadycompiled.indexOf(s)){if(t.alreadycompiled.push(s),"postprocessors.ne"===s)var a=require("nearley/builtin/postprocessors.ne");else if("whitespace.ne"===s)a=require("nearley/builtin/whitespace.ne");else if("string.ne"===s)a=require("nearley/builtin/string.ne");else if("number.ne"===s)a=require("nearley/builtin/number.ne");else if("cow.ne"===s)a=require("nearley/builtin/cow.ne");var l=nearley.Grammar.fromCompiled(nearleyLanguageBootstrapped),p=new nearley.Parser(l);p.feed(a);var u=Compile(p.results[0],{file:s,__proto__:t});r.rules=r.rules.concat(u.rules),r.body=r.body.concat(u.body),Object.keys(u.config).forEach((function(e){r.config[e]=u.config[e]})),Object.keys(u.macros).forEach((function(e){r.macros[e]=u.macros[e]}))}}else i.macro?r.macros[i.macro]={args:i.args,exprs:i.exprs}:i.config?r.config[i.config]=i.value:(h(i.name,i.rules,{}),r.start||(r.start=i.name))}return r;function c(e,o,r){t.rangeCallback&&t.rangeCallback(e,o,o+r)}function h(e,o,n){for(var i=0;i<o.length;i++){var s=f(e,o[i],n);t.nojs&&(s.postprocess=null),r.rules.push(s)}}function f(e,t,o){for(var r=[],n=0;n<t.tokens.length;n++){var i=m(e,t.tokens[n],o);null!==i&&r.push(i)}return new nearley.Rule(e,r,t.postprocess)}function m(e,t,n){if("string"==typeof t)return"null"===t?null:t;if(t instanceof RegExp)return t;if(t.literal)return t.literal.length?1===t.literal.length||r.config.lexer?t:function(e,t,r){var n=o(e+"$string");return c(n,t.pos,JSON.stringify(t.literal).length),h(n,[{tokens:t.literal.split("").map((function(e){return{literal:e}})),postprocess:{builtin:"joiner"}}],r),n}(e,t,n):null;if(t.token){if(r.config.lexer){var i=t.token;return-1===r.customTokens.indexOf(i)&&r.customTokens.push(i),{token:"("+(r.config.lexer+".has("+JSON.stringify(i)+") ? {type: "+JSON.stringify(i)+"} : "+i)+")"}}return t}if(t.subexpression)return function(e,t,r){var n=t.subexpression,i=o(e+"$subexpression");return h(i,n,r),i}(e,t,n);if(t.ebnf)return function(e,t,r){switch(t.modifier){case":+":return function(e,t,r){var n=o(e+"$ebnf");return h(n,[{tokens:[t.ebnf]},{tokens:[t.ebnf,n],postprocess:{builtin:"arrconcat"}}],r),n}(e,t,r);case":*":return function(e,t,r){var n=o(e+"$ebnf");return h(n,[{tokens:[]},{tokens:[t.ebnf,n],postprocess:{builtin:"arrconcat"}}],r),n}(e,t,r);case":?":return function(e,t,r){var n=o(e+"$ebnf");return h(n,[{tokens:[t.ebnf],postprocess:{builtin:"id"}},{tokens:[],postprocess:{builtin:"nuller"}}],r),n}(e,t,r)}}(e,t,n);if(t.macrocall)return function(e,t,n){var i=o(e+"$macrocall"),s=r.macros[t.macrocall];if(!s)throw new Error("Unkown macro: "+t.macrocall);if(s.args.length!==t.args.length)throw new Error("Argument count mismatch.");for(var a={__proto__:n},l=0;l<s.args.length;l++){var p=o(e+"$macrocall");a[s.args[l]]=p,h(p,[t.args[l]],n)}return h(i,s.exprs,a),i}(e,t,n);if(t.mixin){if(n[t.mixin])return m(e,n[t.mixin],n);throw new Error("Unbound variable: "+t.mixin)}throw new Error("unrecognized token: "+JSON.stringify(t))}}function uniquer(){var e={};return function(t){var o=e[t]=(e[t]||0)+1;return t+"$"+o}}var generate=createCommonjsModule((function(e){var t,o;t=commonjsGlobal,o=function(e){function t(e,t,i){return null==i&&(i=""),"[\n    "+e.map((function(e){return function(e,t){var i="{";return i+='"name": '+JSON.stringify(e.name),i+=', "symbols": ['+e.symbols.map(n).join(", ")+"]",e.postprocess&&(e.postprocess.builtin&&(e.postprocess=t[e.postprocess.builtin]),i+=', "postprocess": '+r(o(e.postprocess),"        ",{indentFirst:!1})),i+="}"}(e,t)})).join(",\n    ")+"\n"+i+"]"}function o(e){var t=e.toString().split(/\n/);if(1===t.length)return[t[0].replace(/^\s+|\s+$/g,"")];for(var o=null,r=t.slice(1),n=0;n<r.length;n++){var i=/^\s*/.exec(r[n]);i&&i[0].length!==r[n].length&&(null===o||i[0].length<o.length)&&(o=i[0])}return null===o?t:t.map((function(e){return e.slice(0,o.length)===o?e.slice(o.length):e}))}function r(e,t,o){var r;return r=Array.isArray(e)?e:e.toString().split("\n"),o=o||{},r.map((function(e,r){var n=!0;return 0!=r||o.indentFirst||(n=!1),n?t+e:e})).join("\n")}function n(e){return e instanceof RegExp?e.toString():e.token?e.token:JSON.stringify(e)}var i=function(e,t){if(e.config.preprocessor||(e.config.preprocessor="_default"),!i[e.config.preprocessor])throw new Error("No such preprocessor: "+e.config.preprocessor);return i[e.config.preprocessor](e,t)};return i.js=i._default=i.javascript=function(e,o){var r="// Generated automatically by nearley, version "+e.version+"\n";return r+="// http://github.com/Hardmath123/nearley\n",r+="(function () {\n",r+="function id(x) { return x[0]; }\n",r+=e.body.join("\n"),r+="var grammar = {\n",r+="    Lexer: "+e.config.lexer+",\n",r+="    ParserRules: "+t(e.rules,i.javascript.builtinPostprocessors)+"\n",r+="  , ParserStart: "+JSON.stringify(e.start)+"\n",r+="}\n",r+="if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {\n",r+="   module.exports = grammar;\n",r+="} else {\n",r+="   window."+o+" = grammar;\n",r+="}\n",r+="})();\n"},i.javascript.builtinPostprocessors={joiner:"function joiner(d) {return d.join('');}",arrconcat:"function arrconcat(d) {return [d[0]].concat(d[1]);}",arrpush:"function arrpush(d) {return d[0].concat([d[1]]);}",nuller:"function(d) {return null;}",id:"id"},i.module=i.esmodule=function(e,o){var r="// Generated automatically by nearley, version "+e.version+"\n";return r+="// http://github.com/Hardmath123/nearley\n",r+="function id(x) { return x[0]; }\n",r+=e.body.join("\n"),r+="let Lexer = "+e.config.lexer+";\n",r+="let ParserRules = "+t(e.rules,i.javascript.builtinPostprocessors)+";\n",r+="let ParserStart = "+JSON.stringify(e.start)+";\n",r+="export default { Lexer, ParserRules, ParserStart };\n"},i.cs=i.coffee=i.coffeescript=function(e,n){var s="# Generated automatically by nearley, version "+e.version+"\n";return s+="# http://github.com/Hardmath123/nearley\n",s+="do ->\n",s+="  id = (d) -> d[0]\n",s+=r(o(e.body.join("\n")),"  ")+"\n",s+="  grammar = {\n",s+="    Lexer: "+e.config.lexer+",\n",s+="    ParserRules: "+r(t(e.rules,i.coffeescript.builtinPostprocessors),"      ",{indentFirst:!1})+",\n",s+="    ParserStart: "+JSON.stringify(e.start)+"\n",s+="  }\n",s+="  if typeof module != 'undefined' && typeof module.exports != 'undefined'\n",s+="    module.exports = grammar;\n",s+="  else\n",s+="    window."+n+" = grammar;\n"},i.coffeescript.builtinPostprocessors={joiner:"(d) -> d.join('')",arrconcat:"(d) -> [d[0]].concat(d[1])",arrpush:"(d) -> d[0].concat([d[1]])",nuller:"() -> null",id:"id"},i.ts=i.typescript=function(e,o){var r="// Generated automatically by nearley, version "+e.version+"\n";return r+="// http://github.com/Hardmath123/nearley\n",r+="// Bypasses TS6133. Allow declared but unused functions.\n",r+="// @ts-ignore\n",r+="function id(d: any[]): any { return d[0]; }\n",r+=e.customTokens.map((function(e){return"declare var "+e+": any;\n"})).join(""),r+=e.body.join("\n"),r+="\n",r+="interface NearleyToken {\n",r+="  value: any;\n",r+="  [key: string]: any;\n",r+="};\n",r+="\n",r+="interface NearleyLexer {\n",r+="  reset: (chunk: string, info: any) => void;\n",r+="  next: () => NearleyToken | undefined;\n",r+="  save: () => any;\n",r+="  formatError: (token: never) => string;\n",r+="  has: (tokenType: string) => boolean;\n",r+="};\n",r+="\n",r+="interface NearleyRule {\n",r+="  name: string;\n",r+="  symbols: NearleySymbol[];\n",r+="  postprocess?: (d: any[], loc?: number, reject?: {}) => any;\n",r+="};\n",r+="\n",r+="type NearleySymbol = string | { literal: any } | { test: (token: any) => boolean };\n",r+="\n",r+="interface Grammar {\n",r+="  Lexer: NearleyLexer | undefined;\n",r+="  ParserRules: NearleyRule[];\n",r+="  ParserStart: string;\n",r+="};\n",r+="\n",r+="const grammar: Grammar = {\n",r+="  Lexer: "+e.config.lexer+",\n",r+="  ParserRules: "+t(e.rules,i.typescript.builtinPostprocessors,"  ")+",\n",r+="  ParserStart: "+JSON.stringify(e.start)+",\n",r+="};\n",r+="\n",r+="export default grammar;\n"},i.typescript.builtinPostprocessors={joiner:"(d) => d.join('')",arrconcat:"(d) => [d[0]].concat(d[1])",arrpush:"(d) => d[0].concat([d[1]])",nuller:"() => null",id:"id"},i},e.exports?e.exports=o():t.generate=o(t.nearley)})),warn=function(e,t){e.out.write("WARN\t"+t+"\n")};function lintNames(e,t){var o=[];e.rules.forEach((function(e){o.push(e.name)})),e.rules.forEach((function(e){e.symbols.forEach((function(e){e.literal||e.token||e.constructor===RegExp||-1===o.indexOf(e)&&warn(t,"Undefined symbol `"+e+"` used.")}))}))}function lint(e,t){t.out||(t.out=process.stderr),lintNames(e,t)}var lint_1=lint;function stream(){let e="";return{write(t){e+=t},dump:()=>e}}function AnnotatePositions(e){return e.map((e=>new nearley.Rule(e.name,e.symbols,e.postprocess&&((t,o,r)=>{var n=e.postprocess(t,o,r);return null===n?null:("object"!=typeof n||n.slice||(n.pos=o),n)}))))}function compile(e){let t=new nearley.Parser(AnnotatePositions(nearleyLanguageBootstrapped.ParserRules),nearleyLanguageBootstrapped.ParserStart,{lexer:nearleyLanguageBootstrapped.Lexer}),o=stream(),r="",n={};try{if(t.feed(e),t.results[0]){var i=compileLowLevel(t.results[0],{rangeCallback:function(e,t,o){n[e]=[t,o]}});lint_1(i,{out:o}),r=generate(i,"grammar")}}catch(e){o.write(e)}return{errors:o.dump(),positions:n,output:r}}var objectID=0,vars={},jsFuncMap={saw:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.saw(${t[0].loop})`},sin:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.sinewave(${t[0].loop})`},tri:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.triangle(${t[0].loop})`},pha:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.phasor(${t[0].loop})`},ph2:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>3?t[3].loop:0});`,loop:(e,t)=>`${e}.phasorBetween(${t[0].loop},${t[1].loop},${t[2].loop})`},sqr:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.square(${t[0].loop})`},pul:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>2?t[2].loop:0});`,loop:(e,t)=>`${e}.pulse(${t[0].loop},${t[1].loop})`},imp:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.impulse(${t[0].loop})`},sawn:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc();\n                      ${e}.phaseReset(${t.length>1?t[1].loop:0});`,loop:(e,t)=>`${e}.sawn(${t[0].loop})`},noiz:{setup:(e,t)=>`${e} = new Maximilian.maxiOsc()`,loop:(e,t)=>`${e}.noise()*${t[0].loop}`},gt:{setup:(e,t)=>"",loop:(e,t)=>`((${t[0].loop} > ${t[1].loop}) ? 1 : 0)`},lt:{setup:(e,t)=>"",loop:(e,t)=>`((${t[0].loop} < ${t[1].loop}) ? 1 : 0)`},mod:{setup:(e,t)=>"",loop:(e,t)=>`(${t[0].loop} % ${t[1].loop})`},add:{setup:(e,t)=>"",loop:(e,t)=>`(${t[0].loop} + ${t[1].loop})`},mul:{setup:(e,t)=>"",loop:(e,t)=>`(${t[0].loop} * ${t[1].loop})`},sub:{setup:(e,t)=>"",loop:(e,t)=>`(${t[0].loop} - ${t[1].loop})`},div:{setup:(e,t)=>"",loop:(e,t)=>`(${t[1].loop} != 0 ? ${t[0].loop}/${t[1].loop} : 0)`},pow:{setup:(e,t)=>"",loop:(e,t)=>`Math.pow(${t[0].loop},${t[1].loop})`},abs:{setup:(e,t)=>"",loop:(e,t)=>`Math.abs(${t[0].loop})`},env:{setup:(e,t)=>`${e} = new Maximilian.maxiEnv();\n                      ${e}.setAttack(${t[1].loop});\n                      ${e}.setDecay(${t[2].loop});\n                      ${e}.setSustain(${t[3].loop});\n                      ${e}.setRelease(${t[4].loop})`,loop:(e,t)=>`${e}.adsr(1,${t[0].loop})`},sum:{setup:(e,t)=>"",loop:(e,t)=>{let o=`(${t[0].loop}`;for(let e=1;e<t.length;e++)o+=`+${t[e].loop}`;return o+")"}},mix:{setup:(e,t)=>"",loop:(e,t)=>{let o=`((${t[0].loop}`;for(let e=1;e<t.length;e++)o+=`+${t[e].loop}`;return o+`)/${t.length})`}},prod:{setup:(e,t)=>"",loop:(e,t)=>{let o=`(${t[0].loop}`;for(let e=1;e<t.length;e++)o+=`*${t[e].loop}`;return o+")"}},blin:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiMap.linlin(${t[0].loop}, -1, 1, ${t[1].loop}, ${t[2].loop})`},ulin:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiMap.linlin(${t[0].loop}, 0, 1, ${t[1].loop}, ${t[2].loop})`},bexp:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiMap.linexp(${t[0].loop}, -1, 1, ${t[1].loop}, ${t[2].loop})`},uexp:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiMap.linexp(${t[0].loop}, 0.0000001, 1, ${t[1].loop}, ${t[2].loop})`},linlin:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiMap.linlin(${t[0].loop}, ${t[1].loop}, ${t[2].loop},${t[3].loop}, ${t[4].loop})`},linexp:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiMap.linexp(${t[0].loop}, ${t[1].loop}, ${t[2].loop}, ${t[3].loop}, ${t[4].loop})`},dist:{setup:(e,t)=>`${e} = new Maximilian.maxiNonlinearity()`,loop:(e,t)=>`${e}.atanDist(${t[0].loop},${t[1].loop})`},softclip:{setup:(e,t)=>`${e} = new Maximilian.maxiNonlinearity()`,loop:(e,t)=>`${e}.softclip(${t[0].loop})`},hardclip:{setup:(e,t)=>`${e} = new Maximilian.maxiNonlinearity()`,loop:(e,t)=>`${e}.hardclip(${t[0].loop})`},asymclip:{setup:(e,t)=>`${e} = new Maximilian.maxiNonlinearity()`,loop:(e,t)=>`${e}.asymclip(${t[0].loop},${t[1].loop},${t[2].loop})`},flange:{setup:(e,t)=>`${e} = new Maximilian.maxiFlanger()`,loop:(e,t)=>`${e}.flange(${t[0].loop},${t[1].loop},${t[2].loop},${t[3].loop},${t[4].loop})`},chor:{setup:(e,t)=>`${e} = new Maximilian.maxiChorus()`,loop:(e,t)=>`${e}.chorus(${t[0].loop},${t[1].loop},${t[2].loop},${t[3].loop},${t[4].loop})`},dl:{setup:(e,t)=>`${e} = new Maximilian.maxiDelayline()`,loop:(e,t)=>`${e}.dl(${t[0].loop},${t[1].loop},${t[2].loop})`},lpf:{setup:(e,t)=>`${e} = new Maximilian.maxiFilter()`,loop:(e,t)=>`${e}.lopass(${t[0].loop},${t[1].loop})`},hpf:{setup:(e,t)=>`${e} = new Maximilian.maxiFilter()`,loop:(e,t)=>`${e}.hipass(${t[0].loop},${t[1].loop})`},lpz:{setup:(e,t)=>`${e} = new Maximilian.maxiFilter()`,loop:(e,t)=>`${e}.lores(${t[0].loop},${t[1].loop},${t[2].loop})`},hpz:{setup:(e,t)=>`${e} = new Maximilian.maxiFilter()`,loop:(e,t)=>`${e}.hires(${t[0].loop},${t[1].loop},${t[2].loop})`},toJS:{setup:(e,t)=>`${e} = new SABOutputTransducer(this.port, 'ML', ${t[1].loop}, this.currentSample, ${3==t.length?1:t[3].loop})`,loop:(e,t)=>`${e}.send(${t[0].loop}, ${t[2].loop})`},fromJS:{setup:(e,t)=>`${e} = new SABInputTransducer(${t[0].loop}, ${2==t.length?1:0})`,loop:(e,t)=>`${e}.getSABValue(inputSABs, ${2==t.length?t[1].loop:0})`},mouseX:{setup:(e,t)=>"",loop:(e,t)=>"this.getSABValue('mxy')[0]"},mouseY:{setup:(e,t)=>"",loop:(e,t)=>"this.getSABValue('mxy')[1]"},at:{setup:(e,t)=>"",loop:(e,t)=>`${t[0].loop}[Math.min(${t[1].loop}, ${t[0].loop}.length-1)]`},sah:{setup:(e,t)=>`${e} = new Maximilian.maxiSampleAndHold();`,loop:(e,t)=>`${e}.sah(${t[0].loop},${t[1].loop})`},stretch:{setup:(e,t)=>`${e} = new Maximilian.maxiSample();\n                      ${e}.setSample(this.getSampleBuffer(${t[4].loop}));\n                      ${e}stretch = new Maximilian.maxiStretch();\n                      ${e}stretch.setSample(${e});`,loop:(e,t)=>`(${e}.isReady() ? ${e}stretch.play(${t[0].loop},${t[1].loop},${t[2].loop},${t[3].loop},0.0) : 0.0)`},adc:{setup:(e,t)=>"",loop:(e,t)=>`(inputs * ${t[0].loop})`},sampler:{setup:(e,t)=>`${e} = new Maximilian.maxiSample();\n                      ${e}.setSample(this.getSampleBuffer(${t[t.length-1].loop}));`,loop:(e,t)=>{let o=`${t[0].loop}`;return 3==t.length?o+=`,${t[1].loop}`:4==t.length&&(o+=`,${t[1].loop},${t[2].loop}`),`(${e}.isReady() ? ${e}.playOnZX(${o}) : 0.0)`}},loop:{setup:(e,t)=>`${e} = new Maximilian.maxiSample();\n                      ${e}.setSample(this.getSampleBuffer(${t[1].loop}));`,loop:(e,t)=>`(${e}.isReady() ? ${e}.play(${t[0].loop}) : 0.0)`},slice:{setup:(e,t)=>`${e} = new Maximilian.maxiSample();\n                      ${e}.setSample(this.getSampleBuffer(${t[2].loop}));`,loop:(e,t)=>`(${e}.isReady() ? ${e}.loopSetPosOnZX(${t[0].loop},${t[1].loop}) : 0.0)`},oscin:{setup:(e,t)=>"",loop:(e,t)=>`this.OSCTransducer(${t[0].loop},${t[1].loop})`},oscout:{setup:(e,t)=>"",loop:(e,t)=>`this.OSCTransducer(${t[0].loop},${t[1].loop})`},sah:{setup:(e,t)=>`${e} = new Maximilian.maxiSampleAndHold();`,loop:(e,t)=>`${e}.sah(${t[0].loop},${t[1].loop})`},stretch:{setup:(e,t)=>`${e} = new Maximilian.maxiSample();\n                      ${e}.setSample(this.getSampleBuffer(${t[4].loop}));\n                      ${e}stretch = new Maximilian.maxiStretch();\n                      ${e}stretch.setSample(${e});`,loop:(e,t)=>`(${e}.isReady() ? ${e}stretch.play(${t[0].loop},${t[1].loop},${t[2].loop},${t[3].loop},0.0) : 0.0)`},bitToSig:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.toSignal(${t[0].loop})`},bitToTrigSig:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.toTrigSignal(${t[0].loop})`},bitNeg:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.neg(${t[0].loop})`},bitInc:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.inc(${t[0].loop})`},bitDec:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.dec(${t[0].loop})`},bitAnd:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.land(${t[0].loop},${t[1].loop})`},bitOr:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.lor(${t[0].loop},${t[1].loop})`},bitXor:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.lxor(${t[0].loop},${t[1].loop})`},bitShl:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.shl(${t[0].loop},${t[1].loop})`},bitShr:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.shr(${t[0].loop},${t[1].loop})`},bitAt:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.at(${t[0].loop},${t[1].loop})`},bitAdd:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.add(${t[0].loop},${t[1].loop})`},bitSub:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.sub(${t[0].loop},${t[1].loop})`},bitMul:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.mul(${t[0].loop},${t[1].loop})`},bitEq:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.eq(${t[0].loop},${t[1].loop})`},bitGt:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.gt(${t[0].loop},${t[1].loop})`},bitGte:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.gte(${t[0].loop},${t[1].loop})`},bitLte:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.lte(${t[0].loop},${t[1].loop})`},bitLt:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.lt(${t[0].loop},${t[1].loop})`},setup:(e,t)=>"",bitDiv:{loop:(e,t)=>`Maximilian.maxiBits.div(${t[0].loop},${t[1].loop})`},bitr:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.at(${t[0].loop},${t[1].loop},${t[2].loop})`},bitnoise:{setup:(e,t)=>"",loop:(e,t)=>"Maximilian.maxiBits.noise()"},btime:{setup:(e,t)=>"",loop:(e,t)=>"this.bitTime"},bitFromSig:{setup:(e,t)=>"",loop:(e,t)=>`Maximilian.maxiBits.fromSignal(${t[0].loop})`},clp:{setup:(e,t)=>"",loop:(e,t)=>`this.clockPhase(${t[0].loop},${t.length>1?t[1].loop:0})`},clt:{setup:(e,t)=>"",loop:(e,t)=>`this.clockTrig(${t[0].loop},${t.length>1?t[1].loop:0})`},clk:{setup:(e,t)=>"",loop:(e,t)=>`(()=>{this.setBPM(${t[0].loop}); this.setBeatsPerBar(${t[1].loop});})()`},onzx:{setup:(e,t)=>`${e} = new Maximilian.maxiTrigger();`,loop:(e,t)=>`${e}.onZX(${t[0].loop})`},onchange:{setup:(e,t)=>`${e} = new Maximilian.maxiTrigger();`,loop:(e,t)=>`${e}.onChanged(${t[0].loop},${t[1].loop})`},count:{setup:(e,t)=>`${e} = new Maximilian.maxiCounter();`,loop:(e,t)=>`${e}.count(${t[0].loop},${t[1].loop})`},idx:{setup:(e,t)=>`${e} = new Maximilian.maxiIndex();`,loop:(e,t)=>`${e}.pull(${t[0].loop},${t[1].loop},${t[2].loop})`},svf:{setup:(e,t)=>`${e} = new Maximilian.maxiSVF();\n                      ${e}_p1 = new Maximilian.maxiTrigger();\n                      ${e}_p2 = new Maximilian.maxiTrigger();`,loop:(e,t)=>`( () => { ${e}_cutoff = ${t[1].loop};\n                                if (${e}_p1.onChanged(${e}_cutoff, 1e-5)) {${e}.setCutoff(${e}_cutoff)};\n                                ${e}_res = ${t[2].loop};\n                                if (${e}_p2.onChanged(${e}_res, 1e-5)) {${e}.setResonance(${e}_res)};\n                                return ${e}.play(${t[0].loop},${t[3].loop},${t[4].loop},${t[5].loop},${t[6].loop})})()`},bitclock:{setup:(e,t)=>"",loop:(e,t)=>"this.bitclock"},pvshift:{setup:(e,t)=>`${e} = new pvshift();`,loop:(e,t)=>`${e}.play(${t[0].loop},${t[1].loop})`},rsq:{setup:(e,t)=>`${e} = new Maximilian.maxiRatioSeq();`,loop:(e,t)=>2==t.length?`${e}.playTrig(${t[0].loop},${t[1].loop})`:`${e}.playValues(${t[0].loop},${t[1].loop},${t[2].loop})`},o303:{setup:(e,t)=>`${e} = new Open303.Open303();\n                      ${e}.setSampleRate(sampleRate);\n                      ${e}_tnote = new Maximilian.maxiTrigger();\n                      ${e}_twf = new Maximilian.maxiTrigger();\n                      ${e}_tcut = new Maximilian.maxiTrigger();\n                      ${e}_tres = new Maximilian.maxiTrigger();\n                      ${e}_tenvm = new Maximilian.maxiTrigger();\n                      ${e}_tdec = new Maximilian.maxiTrigger();\n                      ${e}_tnoteoff = new Maximilian.maxiTrigger();\n                      ${e}_tatt = new Maximilian.maxiTrigger();`,loop:(e,t)=>`(()=>{\n\t\t\tlet newNote = ${e}_tnote.onZX(${t[0].loop});\n\t\t\tlet accent = ${t[3].loop};\n\t\t\tif (newNote) {\n\t\t\t\tif (${t[2].loop}>0) {\n\t\t\t\t\t${e}.slideToNote(${t[1].loop},accent);\n\t\t\t\t}else{\n\t\t\t\t\t${e}.triggerNote(${t[1].loop},accent);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (${e}_tnoteoff.onChanged(${t[4].loop}, 1e-5)) {${e}.allNotesOff()};\n\t\t\tif (${e}_twf.onChanged(${t[5].loop}, 1e-5)) {${e}.setWaveform(${t[5].loop})};\n\t\t\tif (${e}_tcut.onChanged(${t[6].loop}, 1e-5)) {${e}.setCutoff(${t[6].loop})};\n\t\t\tif (${e}_tres.onChanged(${t[7].loop}, 1e-5)) {${e}.setResonance(${t[7].loop})};\n\t\t\tif (${e}_tenvm.onChanged(${t[8].loop}, 1e-5)) {${e}.setEnvMod(${t[8].loop})};\n\t\t\tif (${e}_tatt.onChanged(${t[9].loop}, 1e-5)) {${e}.setNormalAttack(${t[9].loop})};\n\t\t\tif (${e}_tdec.onChanged(${t[10].loop}, 1e-5)) {${e}.setDecay(${t[10].loop})};\n\t\t\t${e}.setAccent(${t[11].loop});\n\t\t\treturn ${e}.play();})()`},freeverb:{setup:(e,t)=>`${e} = new Maximilian.maxiFreeVerb();`,loop:(e,t)=>`${e}.play(${t[0].loop},${t[1].loop},${t[2].loop})`},line:{setup:(e,t)=>`${e} = new Maximilian.maxiLine(); ${e}.prepare(0,1,${t[1].loop}, false); ${e}.triggerEnable(1);`,loop:(e,t)=>`${e}.play(${t[0].loop})`},const:{setup:(e,t)=>"",loop:(e,t)=>`${t[0].loop}`},poll:{setup:(e,t)=>`${e} = new poll()`,loop:(e,t)=>`${e}.play(${t[0].loop})`},dac:{setup:(e,t)=>"",loop:(e,t)=>1==t.length?`this.dacOutAll(${t[0].loop})`:`this.dacOut(${t[0].loop},${t[1].loop})`},fft:{setup:(e,t)=>`${e} = new fft(${t[1].loop}, ${t[2].loop})`,loop:(e,t)=>`${e}.play(${t[0].loop})`},ifft:{setup:(e,t)=>`${e} = new ifft(${t[3].loop}, ${t[4].loop})`,loop:(e,t)=>`${e}.play(${t[0].loop}, ${t[1].loop}, ${t[2].loop})`},mfcc:{setup:(e,t)=>`${e} = new mfcc(${t[1].loop}, ${t[2].loop}, ${t[3].loop})`,loop:(e,t)=>`${e}.play(${t[0].loop})`}};class ASTreeToJavascript{static getNextID(){return objectID=objectID>9999?0:++objectID}static emptyCode(){return{setup:"",loop:"",paramMarkers:[]}}static traverseTree(e,t,o,r,n){let i={"@lang":(e,t)=>(t.map((t=>{let i=ASTreeToJavascript.traverseTree(t,ASTreeToJavascript.emptyCode(),o,r,n);e.setup+=i.setup,e.loop+=i.loop})),e),"@spawn":(e,t)=>((e=ASTreeToJavascript.traverseTree(t,e,o,r,n)).loop+=";",e),"@sigp":(e,t)=>{let i=[{s:t.paramBegin,e:t.paramEnd,l:o}];e.paramMarkers=e.paramMarkers.concat(i);let s=t["@func"].value,a=jsFuncMap[s],l="q.b"+n+"u"+ASTreeToJavascript.getNextID(),p=[];for(let e=0;e<t["@params"].length;e++){let i=ASTreeToJavascript.emptyCode();i=ASTreeToJavascript.traverseTree(t["@params"][e],i,o+1,r,n),p[e]=i}let u="";for(let t in p)u+=p[t].setup,e.paramMarkers=e.paramMarkers.concat(p[t].paramMarkers);return e.setup+=`${u} ${a.setup(l,p)};`,e.loop+=`${a.loop(l,p)}`,e},"@setvar":(e,t)=>{let i=t["@varname"],s=r[i];null==s&&(s=Object.keys(r).length,r[i]=s);let a=ASTreeToJavascript.traverseTree(t["@varvalue"],ASTreeToJavascript.emptyCode(),o+1,r,n);return e.setup+=a.setup,e.loop=`(mem[${s}] = ${a.loop})`,e},"@getvar":(e,t)=>{let o=r[t];return null==o&&(o=Object.keys(r).length,r[t]=o),e.loop+=`(mem[${o}] != undefined ? mem[${o}] : 0)`,e},"@string":(e,t)=>(("string"==typeof t||t instanceof String)&&(e.loop+=`'${t}'`),e),"@num":(e,t)=>(null!=t.value&&(e.loop+=`${t.value}`),e),"@list":(e,t)=>{let i="q.b"+n+"l"+ASTreeToJavascript.getNextID();e.setup+=`${i} = new Float64Array(${t.length});`,e.loop+="(()=>{";let s="";for(let a=0;a<t.length;a++){let l=ASTreeToJavascript.traverseTree(t[a],ASTreeToJavascript.emptyCode(),o,r,n);"@num"==Object.keys(t[a])[0]?e.setup+=`${i}[${a}] = ${l.loop};`:(s+=l.setup,e.loop+=`${i}[${a}] = ${l.loop};`)}return e.loop+=`return ${i}})()`,e.setup+=s,e}};return Array.isArray(e)?e.map((e=>{Object.keys(e).map((o=>{t=i[o](t,e[o])}))})):Object.keys(e).map((o=>{console.log(o),t=i[o](t,e[o])})),t}static treeToCode(e,t=0){vars={};let o=ASTreeToJavascript.traverseTree(e,ASTreeToJavascript.emptyCode(),0,vars,t);return o.setup=`() => {let q=this.newq(); ${o.setup}; return q;}`,o.loop=`(q, inputs, mem) => {${o.loop}}`,o}}var sema=createCommonjsModule((function(e){var t;t=commonjsGlobal,e.exports?e.exports={num:function(e){return{"@num":{value:e}}},str:function(e){return{"@string":e}},synth:function(e,t){return{"@sigp":{"@params":t,"@func":{value:e}}}},setvar:function(e,t){return{"@setvar":{"@varname":e,"@varvalue":t}}},getvar:function(e){return{"@getvar":e}}}:t.sema={num:function(e){return{"@num":{value:e}}},str:function(e){return{"@string":e}},synth:function(e,t){return{"@sigp":{"@params":t,"@func":{value:e}}}},setvar:function(e,t){return{"@setvar":{"@varname":e,"@varvalue":t}}},getvar:function(e){return{"@getvar":e}}}}));function getParserModuleExports(source){let sema$1=sema;sema$1.num("3");let module={exports:""};return eval(source),module.exports}function compile$1(e,t){let o;const{errors:r,output:n}=compile(e),i=getParserModuleExports(n),s=new nearley.Parser(i);if(!r&&s){const e=s.feed(t);e&&(o=ASTreeToJavascript.treeToCode(e.results,0))}return{errors:r,dspCode:o}}exports.Engine=Engine,exports.compile=compile$1,Object.defineProperty(exports,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
